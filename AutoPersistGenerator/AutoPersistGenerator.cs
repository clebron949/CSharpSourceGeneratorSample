using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace AutoPersistGenerator;

[Generator(LanguageNames.CSharp)]
public class AutoPersistGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var classDeclarations = context
            .SyntaxProvider.CreateSyntaxProvider(
                predicate: static (node, _) =>
                    node is ClassDeclarationSyntax c && c.AttributeLists.Count > 0,
                transform: static (ctx, _) =>
                {
                    var classSyntax = (ClassDeclarationSyntax)ctx.Node;
                    var symbol =
                        ctx.SemanticModel.GetDeclaredSymbol(classSyntax) as INamedTypeSymbol;
                    return symbol;
                }
            )
            .Where(static symbol =>
                symbol is not null
                && symbol
                    .GetAttributes()
                    .Any(a =>
                        a.AttributeClass?.ToDisplayString()
                        == "AutoPersistDemo.AutoPersistAttribute"
                    )
            );

        context.RegisterSourceOutput(classDeclarations, GenerateSource);
    }

    private void GenerateSource(SourceProductionContext context, INamedTypeSymbol classSymbol)
    {
        var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
        var className = classSymbol.Name;

        var fields = classSymbol
            .GetMembers()
            .OfType<IFieldSymbol>()
            .Where(f => f.DeclaredAccessibility == Accessibility.Private && !f.IsStatic);

        var sb = new StringBuilder();
        sb.AppendLine(
            $@"// <auto-generated/>
using System.IO;
using System.Text.Json;

namespace {namespaceName}
{{
    public partial class {className}
    {{"
        );

        // Generate constructor to load from JSON
        sb.AppendLine(
            $@"
        public {className}()
        {{
            LoadFromFile();
        }}

        private void LoadFromFile()
        {{
            var filePath = ""{className}.json"";
            if (File.Exists(filePath))
            {{
                try
                {{
                    var json = File.ReadAllText(filePath);
                    var loaded = JsonSerializer.Deserialize<{className}>(json);
                    if (loaded != null)
                    {{"
        );

        // Copy fields from loaded object
        foreach (var field in fields)
        {
            string fieldName = field.Name;
            string propertyName =
                Char.ToUpperInvariant(fieldName.TrimStart('_')[0])
                + fieldName.TrimStart('_').Substring(1);

            sb.AppendLine($@"                        this.{fieldName} = loaded.{fieldName};");
        }

        sb.AppendLine(
            $@"                    }}
                }}
                catch (JsonException)
                {{
                    // If JSON is invalid, continue with default values
                }}
                catch (IOException)
                {{
                    // If file can't be read, continue with default values
                }}
            }}
        }}"
        );

        // Generate properties with auto-save
        foreach (var field in fields)
        {
            string fieldName = field.Name;
            string propertyName =
                Char.ToUpperInvariant(fieldName.TrimStart('_')[0])
                + fieldName.TrimStart('_').Substring(1);
            string type = field.Type.ToDisplayString();

            sb.AppendLine(
                $@"
        public {type} {propertyName}
        {{
            get => {fieldName};
            set
            {{
                {fieldName} = value;
                Save();
            }}
        }}"
            );
        }

        // Generate Save method
        sb.AppendLine(
            $@"
        private void Save()
        {{
            try
            {{
                var json = JsonSerializer.Serialize(this, new JsonSerializerOptions
                {{
                    WriteIndented = true
                }});
                File.WriteAllText(""{className}.json"", json);
            }}
            catch (IOException)
            {{
                // Handle file write errors gracefully
            }}
        }}"
        );

        sb.AppendLine("    }");
        sb.AppendLine("}");

        context.AddSource(
            $"{className}_AutoPersist.g.cs",
            SourceText.From(sb.ToString(), Encoding.UTF8)
        );
    }
}
